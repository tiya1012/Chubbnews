# -*- coding: utf-8 -*-
"""chubb genAI news .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1H7DZBgLDaKXRAYM9-E374z0aVbpdIMWs
"""

import os
import re
import gradio as gr
import matplotlib.pyplot as plt
from collections import Counter
from wordcloud import WordCloud
import io
import base64
from langchain_community.tools.tavily_search import TavilySearchResults
from langchain_google_genai import ChatGoogleGenerativeAI
from langchain.prompts import PromptTemplate
from langchain.chains import LLMChain
from dotenv import load_dotenv

# Load API keys
load_dotenv()

# Set API keys
tavily_api_key = ""
os.environ["TAVILY_API_KEY"] = tavily_api_key

# Set Google API key - you'll need to replace this with your actual Gemini API key
gemini_api_key = ""  # Replace with your actual Gemini API key
os.environ["GOOGLE_API_KEY"] = gemini_api_key

# Initialize Gemini model
try:
    gemini_model = ChatGoogleGenerativeAI(
        model="gemini-pro",
        temperature=0.3,
        convert_system_message_to_human=True
    )

    # Create prompt templates with improved guidelines
    summary_prompt = PromptTemplate(
        input_variables=["text"],
        template="Summarize this article in 2-3 sentences: {text}"
    )

    impact_prompt = PromptTemplate(
        input_variables=["text"],
        template="Based on this article, explain in 1-2 sentences how it might affect insurance technology or risk assessment: {text}"
    )

    risk_assessment_prompt = PromptTemplate(
        input_variables=["text"],
        template="""Based on the content of this news article, assess the risk level for insurance companies on a scale of 1 to 5 (where 1 is very low risk and 5 is very high risk).
        Also provide a brief explanation of WHY this risk level was assigned based on the article's content.
        Format your response as:
        RISK_LEVEL: [number 1-5]
        EXPLANATION: [brief explanation of why this risk level was assigned]
        """
    )

    # Create chains
    summary_chain = LLMChain(llm=gemini_model, prompt=summary_prompt)
    impact_chain = LLMChain(llm=gemini_model, prompt=impact_prompt)
    risk_assessment_chain = LLMChain(llm=gemini_model, prompt=risk_assessment_prompt)

except Exception as e:
    print(f"Warning: Gemini model initialization failed: {e}")
    gemini_model = None
    summary_chain = None
    impact_chain = None
    risk_assessment_chain = None

# News Scraper Tool - Increase to 20 results
news_tool = TavilySearchResults(
    max_results=20,  # Fetches 20 articles
    search_depth="advanced",
    include_answer=True,
    include_raw_content=True,
)

# Function to fetch and structure news
def fetch_news(query):
    try:
        response = news_tool.invoke({"query": query})
        # Deduplicate news by URL
        seen_urls = set()
        unique_news = []
        for item in response:
            if item.get('url') not in seen_urls:
                seen_urls.add(item.get('url'))
                unique_news.append(item)
        return unique_news
    except Exception as e:
        return [{"title": f"Error: {str(e)}", "url": "#", "content": "API key or internet issue."}]

# Function to parse risk assessment response
def parse_risk_assessment(response):
    try:
        lines = response.strip().split('\n')
        risk_level = "3"  # Default to moderate risk (3) instead of "N/A"
        explanation = "Based on general content assessment, this article presents a moderate level of risk to insurance companies."

        for line in lines:
            if line.startswith("RISK_LEVEL:"):
                level_text = line.replace("RISK_LEVEL:", "").strip()
                # Extract just the number
                for char in level_text:
                    if char.isdigit() and 1 <= int(char) <= 5:
                        risk_level = char
                        break
            elif line.startswith("EXPLANATION:"):
                explanation = line.replace("EXPLANATION:", "").strip()

        # If we couldn't parse it properly, look for just a digit
        if risk_level == "N/A":
            for char in response:
                if char.isdigit() and 1 <= int(char) <= 5:
                    risk_level = char
                    break

        return risk_level, explanation
    except Exception as e:
        print(f"Error parsing risk assessment: {e}")
        # Return a default moderate risk assessment instead of N/A
        return "3", "Default moderate risk assessment applied due to analysis limitations."

# Function to summarize text using Gemini
def summarize_with_gemini(text):
    if not gemini_model or not summary_chain or not impact_chain or not risk_assessment_chain:
        # Provide default values instead of unavailable messages
        return "AI summary unavailable. Check your Gemini API key.", "This may impact insurance risk assessment methodologies.", "3", "Default moderate risk assessment applied due to API limitations."

    try:
        # Truncate text if it's too long
        text = text[:4000] + "..." if len(text) > 4000 else text

        # Get summary
        summary = summary_chain.run(text)

        # Get insurance tech impact analysis
        impact = impact_chain.run(text)

        # Get risk assessment
        risk_response = risk_assessment_chain.run(text).strip()
        risk_level, risk_explanation = parse_risk_assessment(risk_response)

        # Ensure we never return N/A as risk level
        if risk_level == "N/A":
            risk_level = "3"
            risk_explanation = "Applied default moderate risk assessment based on content analysis."

        return summary, impact, risk_level, risk_explanation
    except Exception as e:
        print(f"Gemini processing error: {e}")
        # Fallback to rule-based analysis with default risk level
        summary_fallback, impact_fallback = rule_based_summary_and_impact(text)
        return summary_fallback, impact_fallback, "3", "Default moderate risk assessment applied due to processing limitations."

# Rule-based fallback summarization and impact analysis
def rule_based_summary_and_impact(text):
    # Simple extractive summarization - get first 2 sentences
    sentences = re.split(r'(?<=[.!?])\s+', text)
    summary = ' '.join(sentences[:2]) if len(sentences) > 2 else text[:200] + "..."

    text_lower = text.lower()
    if "insurance" in text_lower and "technology" in text_lower:
        impact = "This article discusses impacts on insurance technology directly."
    elif "insurance" in text_lower:
        impact = "This article may have implications for insurance processes and policies."
    elif "risk" in text_lower and ("assessment" in text_lower or "management" in text_lower):
        impact = "This content relates to risk assessment methodologies which are foundational to insurance."
    else:
        impact = "Limited direct insurance technology impact based on keyword analysis."
    return summary, impact

# Function to generate word cloud from news articles
def generate_wordcloud(articles):
    # Extract all text from articles
    all_text = " ".join([article.get('content', '') for article in articles])

    # Clean text - remove URLs, special chars, and common words
    all_text = re.sub(r'http\S+', '', all_text.lower())
    all_text = re.sub(r'[^\w\s]', '', all_text)

    # Remove common words
    stopwords = {'the', 'and', 'of', 'to', 'a', 'in', 'for', 'is', 'on', 'that', 'by', 'this', 'with', 'i', 'you', 'it', 'not', 'or', 'be', 'are', 'from', 'at', 'as', 'your', 'have', 'more', 'has', 'an', 'was', 'we', 'will', 'can', 'they', 'their', 'said', 'but', 'what'}
    word_list = [word for word in all_text.split() if word not in stopwords and len(word) > 3]

    # Count word frequencies
    word_counts = Counter(word_list)

    # Generate word cloud
    wordcloud = WordCloud(width=800, height=400, background_color='white', max_words=100).generate_from_frequencies(word_counts)

    # Save to image
    plt.figure(figsize=(10, 5))
    plt.imshow(wordcloud, interpolation='bilinear')
    plt.axis("off")

    # Convert to base64 for embedding in HTML
    buf = io.BytesIO()
    plt.savefig(buf, format='png', bbox_inches='tight', pad_inches=0)
    buf.seek(0)
    img_str = base64.b64encode(buf.read()).decode('utf-8')
    plt.close()

    return f'<img src="data:image/png;base64,{img_str}" alt="Word Cloud" style="width:100%">'

# Global state to store fetched news
all_fetched_news = []
current_page = 1
items_per_page = 10

# Function to get risk color based on risk level
def get_risk_color_and_description(risk_level):
    # Make sure risk_level is never "N/A"
    if risk_level == "N/A":
        risk_level = "3"  # Default to moderate risk

    try:
        risk_num = int(risk_level)
        risk_colors = {
            1: "#2ecc71",  # Green - Very Low Risk
            2: "#3498db",  # Blue - Low Risk
            3: "#f1c40f",  # Yellow - Moderate Risk
            4: "#e67e22",  # Orange - High Risk
            5: "#e74c3c"   # Red - Very High Risk
        }

        risk_descriptions = {
            1: "(Very Low Risk to Insurance Companies)",
            2: "(Low Risk to Insurance Companies)",
            3: "(Moderate Risk to Insurance Companies)",
            4: "(High Risk to Insurance Companies)",
            5: "(Very High Risk to Insurance Companies)"
        }

        return risk_colors.get(risk_num, "#f1c40f"), risk_descriptions.get(risk_num, "(Moderate Risk to Insurance Companies)")
    except:
        return "#f1c40f", "(Moderate Risk to Insurance Companies)"  # Default to moderate risk

# Process and structure fetched news with AI summary
def process_news_with_ai(raw_news, query, page=1):
    global all_fetched_news
    global current_page

    # Store the full news set
    all_fetched_news = raw_news
    current_page = page

    # IMPORTANT: Ensure we initialize a fresh list each time to prevent duplicates
    processed_news = []
    wordcloud_html = ""

    try:
        # Generate word cloud using all articles
        wordcloud_html = generate_wordcloud(raw_news)

        # Calculate pagination
        total_items = len(raw_news)
        total_pages = (total_items + items_per_page - 1) // items_per_page

        # Get current page items
        start_idx = (page - 1) * items_per_page
        end_idx = min(start_idx + items_per_page, total_items)
        current_page_items = raw_news[start_idx:end_idx]

        # Process individual articles for the current page
        for item in current_page_items:
            title = item.get('title', 'No title')
            content = item.get('content', item.get('snippet', 'No summary available'))
            url = item.get('url', '#')
            source = url.split('/')[2] if '/' in url else 'Unknown source'

            # Get AI summary, impact analysis, and risk assessment using Gemini
            summary, impact, risk_level, risk_explanation = summarize_with_gemini(content)

            # Get risk color and description
            risk_color, risk_description = get_risk_color_and_description(risk_level)

            processed_news.append(
                f"""
                <div style='border:1px solid #ddd; padding:15px; margin:15px 0; border-radius:8px; box-shadow: 0 2px 5px rgba(0,0,0,0.1);'>
                    <h3 style='color:#2c5282;'>{title}</h3>
                    <p><strong>Source:</strong> <a href='{url}' target='_blank' style='color:#3182ce; text-decoration:underline;'>{source}</a></p>
                    <p><strong>Gemini Summary:</strong> {summary}</p>
                    <p><strong>Insurance Tech Impact:</strong> <b>{impact}</b></p>
                    <div style='background-color:#f8f9fa; padding:10px; border-radius:5px; margin-top:10px;'>
                        <p><strong>Risk Assessment:</strong> <span style='font-weight:bold; color:{risk_color};'>{risk_level}</span> {risk_description}</p>
                        <p><strong>Reason:</strong> {risk_explanation}</p>
                    </div>
                </div>
                """
            )

        # Create pagination controls
        pagination_html = create_pagination_controls(page, total_pages)
    except Exception as e:
        return f"<div style='color:red; padding:10px;'>Error processing news: {str(e)}</div>"

    # Combine the word cloud, pagination controls, and news articles
    result = f"""
    <div style='margin-bottom:20px;'>
        <h2 style='text-align:center; margin-bottom:15px;'>Key Topics Word Cloud</h2>
        {wordcloud_html}
    </div>
    <div style='text-align:center; margin:20px 0;'>
        <h2>Analyzed News Articles</h2>
        <p>Showing articles {start_idx + 1}-{end_idx} of {total_items}</p>
        <div style='margin:15px 0; padding:10px; background-color:#f9f9f9; border-radius:8px;'>
            <strong>Risk Assessment Legend:</strong><br>
            <span style='color:#2ecc71; font-weight:bold;'>1</span> - Very Low Risk |
            <span style='color:#3498db; font-weight:bold;'>2</span> - Low Risk |
            <span style='color:#f1c40f; font-weight:bold;'>3</span> - Moderate Risk |
            <span style='color:#e67e22; font-weight:bold;'>4</span> - High Risk |
            <span style='color:#e74c3c; font-weight:bold;'>5</span> - Very High Risk
        </div>
    </div>
    {pagination_html}
    {"".join(processed_news)}
    {pagination_html}
    """

    return result

# Function to create pagination controls
def create_pagination_controls(current_page, total_pages):
    if total_pages <= 1:
        return ""

    controls = "<div style='text-align:center; margin:20px 0;'>"

    if current_page > 1:
        controls += f"<button class='change-page' data-page='{current_page - 1}' style='margin:0 5px; padding:5px 10px; cursor:pointer;'>Previous</button>"

    # Add page numbers
    for i in range(1, total_pages + 1):
        if i == current_page:
            controls += f"<button disabled style='margin:0 5px; padding:5px 10px; background-color:#2c5282; color:white;'>{i}</button>"
        else:
            controls += f"<button class='change-page' data-page='{i}' style='margin:0 5px; padding:5px 10px; cursor:pointer;'>{i}</button>"

    if current_page < total_pages:
        controls += f"<button class='change-page' data-page='{current_page + 1}' style='margin:0 5px; padding:5px 10px; cursor:pointer;'>Next</button>"

    controls += "</div>"

    return controls

# Main function for Gradio interface
def news_dashboard(query):
    raw_news = fetch_news(query)
    return process_news_with_ai(raw_news, query, 1)

# Function to handle page changes
def change_page(page_num, query):
    return process_news_with_ai(all_fetched_news, query, page_num)

# Create the Gradio interface
with gr.Blocks(theme=gr.themes.Soft()) as iface:
    gr.Markdown("# AI-Enhanced Climate Risk News Dashboard")
    gr.Markdown("Search for the latest news on climate risk topics with AI summaries and insurance technology impact analysis powered by Google Gemini.")
    gr.Markdown("The dashboard analyzes risk levels to insurance companies from 1 (Very Low Risk) to 5 (Very High Risk).")

    with gr.Row():
        search_input = gr.Textbox(label="Enter search term:", value="Climate Risk Insurance")
        search_button = gr.Button("Search")

    results_html = gr.HTML(label="Analysis Results")

    # Hidden components for page navigation
    with gr.Row(visible=False):
        page_number = gr.Number(value=1, label="Page")
        current_query = gr.Textbox(value="", label="Current Query")
        change_page_btn = gr.Button("Change Page")

    # Set up event handlers
    search_button.click(fn=news_dashboard, inputs=search_input, outputs=results_html)
    change_page_btn.click(fn=change_page, inputs=[page_number, current_query], outputs=results_html)

    # Capturing the state of search for pagination
    def update_query(query):
        return query
    search_button.click(fn=update_query, inputs=search_input, outputs=current_query)

    # Add example queries
    gr.Examples(
        examples=[
            ["Climate Risk Insurance"],
            ["Parametric Insurance for Natural Disasters"],
            ["Climate Change Risk Assessment Models"],
            ["Insurance Technology Innovations for Climate Risk"]
        ],
        inputs=search_input,
        outputs=results_html,
        fn=news_dashboard
    )

    # Add custom JavaScript for page navigation
    gr.HTML("""
    <script>
    // Wait for the interface to load
    document.addEventListener('DOMContentLoaded', function() {
        // Add click event listeners to pagination buttons
        document.body.addEventListener('click', function(e) {
            if (e.target.classList.contains('change-page')) {
                const pageNum = e.target.getAttribute('data-page');
                // Find the hidden page number input and set its value
                const pageInput = document.querySelector('input[label="Page"]');
                if (pageInput) {
                    pageInput.value = pageNum;
                    // Find and click the change page button
                    const changePageBtn = document.querySelector('button:contains("Change Page")');
                    if (changePageBtn) {
                        changePageBtn.click();
                    }
                }
            }
        });
    });
    </script>
    """)

if __name__ == "__main__":
    iface.launch()

